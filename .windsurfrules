1PWR Procurement Requisition System

Special Rule: Always start every response with “Roger that”

HIGH PRIORITY GUIDELINES:
1. Always refer to the specifications.md file when making changes
   • If the change contradicts the specification, notify the user immediately
   • Ask whether to proceed with the change or update the specification
   • Never make changes that silently diverge from specifications

Every time you choose to apply a rule(s), explicitly state the rule(s) in the output (exception - the "Roger that" rule). You can abbreviate the rule description to a single word or phrase.
Project Context
This system guides users in handling the submission, tracking and processing of purchase requests and purchase orders. 
    •   Users log in and have differential authorizations based on permissions. 
    •   Requestors make purchase requests which must have required data inputs, some of which are prepopulated by dropdown menus.  
    •   Procurement team evaluates requests and requests revisions if needed.  Quotes are sourced according to business rules and the purchase request becomes a purchase order at the point where it is ready for approval.  Certain dropdown menus can be modified by procurement team.  
    •   Once approved, a PO goes through statuses of payment, shipment, and delivery.
    •   System admins can modify the user permissions, and the contents of dropdown menus

Code Style and Structure
    •   Write concise, technical TypeScript code with accurate examples
    •   Use functional and declarative programming patterns - avoid classes
    •   Prefer iteration and modularization over code duplication
    •   Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError)
    •   Structure repository files as follows:
server/
├── src/
    ├── components/     # Shared React components
    ├── hooks/          # Custom React hooks
    ├── utils/          # Helper functions
    ├── types/          # TypeScript types
    └── lib/            # Shared libraries
extension/
├── src/
    ├── background/     # Service worker scripts
    ├── content/        # Content scripts
    ├── popup/          # Extension popup UI
    ├── options/        # Extension options page
    ├── components/     # Shared React components
    ├── hooks/          # Custom React hooks
    ├── utils/          # Helper functions
    ├── lib/            # Shared libraries
    ├── types/          # TypeScript types
    └── storage/        # Chrome storage utilities
shared/
├── src/
    ├── types/          # TypeScript types, only used for shared types between server and extension
    └── utils/          # Helper functions, only used for shared functions between server and extension
Tech Stack
    •   React
    •   TypeScript
    •   Tailwind CSS
    •   Shadcn UI
    •   Chrome Extension
    •   Express.js
Naming Conventions
    •   Use lowercase with dashes for directories (e.g., components/form-wizard)
    •   Favor named exports for components and utilities
    •   Use PascalCase for component files (e.g., VisaForm.tsx)
    •   Use camelCase for utility files (e.g., formValidator.ts)
TypeScript Usage
    •   Use TypeScript for all code - prefer interfaces over types
    •   Avoid enums -use const objects with 'as const' assertion
    •   Use functional components with TypeScript interfaces
    •   Define strict types for message passing between different parts of the extension
    •   Use absolute imports for all files @/...
    •   Avoid try/catch blocks unless there is good reason to translate or handle error in that abstraction
    •   Use explicit return types for all functions
Chrome Extension Specific
    •   Use Manifest V3 standards
    •   Implement proper message passing between components: interface MessagePayload {
    •     type: string;
    •     data: unknown;
    •   }
    •   Handle permissions properly in manifest.json
    •   Use chrome.storage.local for persistent data
    •   Implement proper error boundaries and fallbacks
    •   Use lib/storage for storage related logic
    •   For the async injected scripts in content/,
    ◦   they must not close over variables from the outer scope
    ◦   they must not use imported functions from the outer scope
    ◦   they must have wrapped error handling so the error message is returned to the caller
State Management
    •   Use React Context for global state when needed
    •   Implement proper state persistence using chrome.storage (for extension)
    •   Implement proper cleanup in useEffect hooks
Syntax and Formatting
    •   Use "function" keyword for pure functions
    •   Avoid unnecessary curly braces in conditionals
    •   Use declarative JSX
    •   Implement proper TypeScript discriminated unions for message types
UI and Styling
    •   Use Shadcn UI and Radix for components
    •   use npx shadcn@latest add <component-name> to add new shadcn components
    •   Implement Tailwind CSS for styling
    •   Consider extension-specific constraints (popup dimensions, permissions)
    •   Follow Material Design guidelines for Chrome extensions
    •   When adding new shadcn component, document the installation command
Error Handling
    •   Implement proper error boundaries
    •   Log errors appropriately for debugging
    •   Provide user-friendly error messages
    •   Handle network failures gracefully
Testing
    •   Write unit tests for utilities and components
    •   Implement E2E tests for critical flows
    •   Test across different Chrome versions
    •   Test memory usage and performance
Security
    •   Implement Content Security Policy
    •   Sanitize user inputs
    •   Handle sensitive data properly
    •   Follow Chrome extension security best practices
    •   Implement proper CORS handling
Git Usage
Commit Message Prefixes:
    •   "fix:" for bug fixes
    •   "feat:" for new features
    •   "perf:" for performance improvements
    •   "docs:" for documentation changes
    •   "style:" for formatting changes
    •   "refactor:" for code refactoring
    •   "test:" for adding missing tests
    •   "chore:" for maintenance tasks
Rules:
    •   Use lowercase for commit messages
    •   Keep the summary line concise
    •   Include description for non-obvious changes
    •   Reference issue numbers when applicable
Documentation
    •   Maintain clear README with setup instructions
    •   Document API interactions and data flows
    •   Keep manifest.json well-documented
    •   Don not include comments unless it is for complex logic
    •   Document permission requirements
Development Workflow
    •   Use proper version control
    •   Implement proper code review process
    •   Test in multiple environments
    •   Follow semantic versioning for releases
    •   Maintain changelog

